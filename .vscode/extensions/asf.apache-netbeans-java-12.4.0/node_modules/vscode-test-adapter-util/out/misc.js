"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const child_process_1 = require("child_process");
/**
 * get the absolute path of the node executable on the user's PATH
 */
function detectNodePath() {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            if (os.platform() === 'win32') {
                const result = yield execPromise('where node');
                return result ? result.trim().split('\r\n')[0] : undefined;
            }
            else {
                const result = yield execPromise('which node');
                return result ? result.trim() : undefined;
            }
        }
        catch (e) {
            return undefined;
        }
    });
}
exports.detectNodePath = detectNodePath;
/**
 * Execute child_process.exec() and return a Promise that resolves to the output of the child process
 * @param cmd - the command to execute - passed to child_process.exec()
 */
function execPromise(cmd) {
    return new Promise((resolve, reject) => {
        child_process_1.exec(cmd, (err, stdout) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(stdout);
            }
        });
    });
}
